const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
//const multer = require('multer');
//const fs = require('fs');
//const path = require('path');
const User = require('./models/user');
const Vehicle = require('./models/vehicle');
const Claim = require('./models/claim');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware to parse JSON bodies
app.use(bodyParser.json());

// MongoDB connection setup
const mongo_uri=process.env.mongo_uri || 'mongodb+srv://Cluster46831:d3lbcltXfUF8@cluster46831.jf4jkge.mongodb.net/vehicle_insurance'
mongoose.connect(mongo_uri, {
  //useNewUrlParser: true,
  //useUnifiedTopology: true,
}).then(() => {
  console.log('Connected to MongoDB');
}).catch(err => {
  console.error('Failed to connect to MongoDB', err);
});

// Signup endpoint
app.post('/signup', async (req, res) => {
  const { name, email, password, dob } = req.body;
  try {
    console.log('Received signup request:', req.body); // Log incoming request body
    const newUser = new User({ name, email, password, dob });
    await newUser.save();
    const userId = newUser._id; // Assuming userId is generated by MongoDB

    console.log('User created successfully:', newUser); // Log user object after saving
    res.status(201).json({ message: 'User created successfully', userId });
  } catch (error) {
    console.error('Error creating user:', error.message);
    res.status(500).json({ error: `Server error, failed to create user: ${error.message}` });
  }
});


// Login endpoint
app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email, password });
    if (user) {
      res.json({ message: 'Login successful' });
    } else {
      res.status(401).json({ message: 'Invalid credentials' });
    }
  } catch (error) {
    console.error('Error logging in:', error);
    res.status(500).json({ error: 'Server error, login failed' });
  }
});

// File vehicle info endpoint
app.post('/vehicle-info', async (req, res) => {
  const { userId, vehicleType, vehicleNumber, vehicleOwnerName } = req.body;
  try {
    const newVehicle = new Vehicle({ userId, vehicleType, vehicleNumber, vehicleOwnerName });
    await newVehicle.save();
    res.status(201).json({ message: 'Vehicle information saved successfully' });
  } catch (error) {
    console.error('Error saving vehicle information:', error);
    res.status(500).json({ error: 'Server error, failed to save vehicle information' });
  }
});

// Configure multer for file uploads
/*const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');  // Uploads directory where files will be stored temporarily
  },
  filename: function (req, file, cb) {
    const ext = path.extname(file.originalname);
    cb(null, Date.now() + ext);  // Rename file to avoid collisions
  }
});
const upload = multer({ storage: storage });*/

// File claim endpoint
app.post('/file-claim', /*upload.array('photos', 5),*/ async (req, res) => {
  const { userId, description, photos } = req.body;

  console.log('Request body:', req.body);

  try {
    const newClaim = new Claim({ userId, description, photos });
    await newClaim.save();
    res.status(201).json({ message: 'Claim filed successfully' });
  } catch (error) {
    console.error('Error filing claim:', error);
    res.status(500).json({ error: 'Server error, failed to file claim' });
  }
});


app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
